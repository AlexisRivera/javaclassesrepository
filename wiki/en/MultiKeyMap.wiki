*See in: * [http://code.google.com/p/javaclassesrepository/wiki/MultiKeyMap?tm=6&wl=es spanish] | _english_
<wiki:toc/>
=Introduction=
This class works the same way that the class [http://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html java.util.HashMap] but allows to store a value with multiples keys
=Definition=
{{{
package org.schimpf.util.arrays
/**
 * @param <KType> the type of keys maintained by this map
 * @param <VType> the type of mapped values
 */
public final class MultiKeyMap<KType, VType> implements Serializable {
	/**
	 * Removes all of the mappings from this map
	 */
	public void clear()

	/**
	 * Returns true if this map contains a mapping for the specified key
	 * @param key The key to be tested
	 * @return True if the specified key exists
	 */
	public boolean containsKey(final KType... key)

	/**
	 * Returns true if this map contains a key for the specified value
	 * @param value Value to be tested
	 * @return True if the specified value exists
	 */
	public boolean containsValue(final Object value)

	/**
	 * Returns a Set view of the mappings contained in this map
	 * @return a set view of key-value
	 */
	public Set<Entry<ArrayList<KType>, VType>> entrySet()

	/**
	 * Returns the value of the specified key
	 * @param key Key
	 * @return Value of specified key
	 */
	public VType get(final KType... key)

	/**
	 * Returns true if this map of key-value is empty
	 * @return True if is empty
	 */
	public boolean isEmpty()

	/**
	 * Returns the list of keys of this map
	 * @return List of keys
	 */
	public Set<ArrayList<KType>> keySet()

	/**
	 * Add a value mapped with a key to the map
	 * @param value Value to add
	 * @param keys Keys of the value
	 * @return Previous value associated with the key or null if is a new key
	 */
	public VType put(final VType value, final KType... keys)

	/**
	 * Removes the value of the specified key if present
	 * @param keys Keys
	 * @return Value of the associed key or null if the key don't exists
	 */
	public VType remove(final KType... keys)

	/**
	 * Return the size of this map
	 * @return Size of this map
	 */
	public int size()

	/**
	 * Return a collection of values stored in this map
	 * @return collection of values stored in this map
	 */
	public Collection<VType> values()
}
}}}
|| *Sources* || [http://code.google.com/p/javaclassesrepository/source/browse/Trunk/util/src/org/schimpf/util/arrays/MultiKeyMap.java last] ||

=Usage=
{{{
public class Usage {
	public static void main(final String[] args) {
		// specify data types for keys and values
		MultiKeyMap<Integer, String> map = new MultiKeyMap<Integer, String>();
		// store some test values
		map.put("VALUE1", 1, 2);
		map.put("VALUE2", 1, 2, 3, 4);
		// show the values
		System.out.println(map.get(1, 2, 3)); // shows null because the key {1,2,3} does not exist
		System.out.println(map.get(1, 2, 3, 4)); // shows VALUE2
		System.out.println(map.get(1, 2)); // shows VALUE1
		System.out.println(map.put("VALUE3", 1, 2)); // shows VALUE1
		System.out.println(map.get(1, 2)); // shows VALUE3
	}
}
}}}

[http://code.google.com/p/javaclassesrepository/wiki/packages?tm=6&wl=en back to packages list]
----
 * *Hermann D. Schimpf*
 * _hschimpf@hds-solutions.net_
 * *[http://hds-solutions.net HDS Solutions]* - _Soluciones Inform√°ticas_