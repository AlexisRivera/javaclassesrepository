libschimpf-sql (1.4.3) stable; urgency=low

  * FIX: AbstractPersistentObject: Primero cargamos la tabla para poder generar el logger con el nombre de la misma
  * FIX: AbstractPersistentObject: Arreglamos el metodo para obtener la instancia de la tabla con el parametro tipeado
  * TableWrapper: Agregamos el metodo para comparar la estructura fisica entre 2 tablas
  * ColumnWrapper: Agregamos el metodo para obtener la presicion de la columna
  * SQLLink: Agregamos la utilizacion de la clase Logger para el manejo de los mensajes de error y depuracion
  * SQLProcess: Agregamos mas mensajes de depuracion

 -- Hermann D. Schimpf <hschimpf@hds-solutions.net>  Mon, 19 Nov 2012 09:06:31 -0300

libschimpf-sql (1.4.2) stable; urgency=low

  * AbstractPersistentObject: Agregamos la implementacion de la interfaz Serializable
  * AbstractPersistentObject: La obtencion de la tabla del PO la realizamos con el attributo, para evitar ejecuciones extras
  * AbstractPersistentObject: Utilizamos la definicion toString() manual

 -- Hermann D. Schimpf <hschimpf@hds-solutions.net>  Mon, 19 Nov 2012 09:06:31 -0300

libschimpf-sql (1.4.1) stable; urgency=low

  * AbstractPersistentObject: Constructores son protected
  * AbstractPersistentObject: Agregamos 2 metodos estaticos para obtener instancias desde la DB
  * AbstractPersistentObject: Agregamos la definicion del PO en toString()
  * AbstractPersistentObject: Agregamos el metodo para armar el identificator del registro. El constructor ahora recibe los parametros como lista (ID1, ID2, ...)
  * AbstractPersistentObject: Agregamos los metodos beforeDelete() y afterDelete()
  * AbstractPersistentObject: Mejoramos la validacion de cambios realizados en el PO
  * AbstractPersistentObject: Validamos la existencia del PO al cargarlo, si no existe almacenamos los IDs especificados en el constructor
  * AbstractPersistentObject: La obtencion de los IDs insertados la hacemos con posiciones, no nombres de campos
  * AbstractPersistentObject: Agregamos mas mensajes de depuracion
  * AbstractPersistentObject: Agregamos el logger estatico
  * AbstractPersistentObject: Ya funciona el metodo getFromDB()
  * AbstractPersistentObject: Agregamos el metodo getReferencedPO() para obtener instancias de Objetos Persistentes referenciados
  * AbstractPersistentObject: Movimos la obtencion del constructor a un metodo aparte
  * AbstractPersistentObject: Ocultamos los metodos getTable() y getPrimaryKeys()
  * ColumnWrapper: Agregamos el metodo para obtener la clase de la columna
  * AbstractPersistentObject: Agregamos otra opcion para el metodo getFromDB() para especificar el ORDER BY
  * *Wrapper: Eliminamos el parametro SQLProcess, obtenemos desde la instancia a la que pertenece el objeto

 -- Hermann D. Schimpf <hschimpf@hds-solutions.net>  Wed, 10 Oct 2012 21:22:35 -0300

libschimpf-sql (1.4.0) stable; urgency=low

  * Movimos las clases *Wrapper al paquete base para ocultar un metodo protegido interno
  * Agregamos la posicion fisica de la columna
  * Eliminamos los metodos abstractos, todo se obtiene localmente
  * Agregamos los metodos para obtener las claves foraneas
  * Mejoramos la obtencion de los datos de la tabla
  * Obtenemos si la columna es auto increment
  * Enviamos el metodo toString a ColumnWrapper

 -- Hermann D. Schimpf <hschimpf@hds-solutions.net>  Thu, 04 Oct 2012 12:08:10 -0300

libschimpf-sql (1.3.0) stable; urgency=low

  * Agregamos la clase abstracta para objetos persistentes (AbstractPersistentObject)
  * SQLProcess: Agregamos la posibilidad de obtener los IDs del registro insertado
  * SQLProcess: Agregamos la posibilidad de transacciones

 -- Hermann D. Schimpf <hschimpf@hds-solutions.net>  Mon, 01 Oct 2012 17:24:23 -0300

libschimpf-sql (1.2.0) stable; urgency=low

  * Agregamos la interfaz comparable a las clases
  * Todas las clases estan relacionadas

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Tue, 26 Jun 2012 19:40:21 -0300

libschimpf-sql (1.1.3) stable; urgency=low

  * %Wrapper: FIX: Agregamos sinchronized a los metodos para evitar duplicacion de datos cuando se utilizan threads

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Thu, 17 May 2012 11:36:29 -0300

libschimpf-sql (1.1.2) stable; urgency=low

  * %Wrapper: FIX: Cargamos las listas antes de retornar el valor
  * %Wrapper: Agregamos los metodos toString() en cada clase
  * %Wrapper: Utilizamos TreeMap para que se mantenga el orden de las listas

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Tue, 08 May 2012 08:39:32 -0300

libschimpf-sql (1.1.1) stable; urgency=low

  * Agregamos los wrappers para bases de datos MySQL

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Wed, 02 May 2012 18:29:53 -0300

libschimpf-sql (1.1.0) stable; urgency=low

  * Agregamos las clases Wrapper para obtener metadatos de las bases de datos
  * Agregamos los wrappers para bases de datos postgresql

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Wed, 02 May 2012 02:23:52 -0300

libschimpf-sql (1.0.4) stable; urgency=low

  * Posibilitamos las conexiones sobre un puerto diferente

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Wed, 11 Apr 2012 08:55:45 -0300

libschimpf-sql (1.0.3) stable; urgency=low

  * Creamos el enlace org.schimpf.sql

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Mon, 09 Apr 2012 22:38:28 -0300

libschimpf-sql (1.0.2) stable; urgency=low

  * Creado el paquete para instalacion

 -- Hermann D. Schimpf <hschimpf@gschimpf.com>  Mon, 02 Apr 2012 15:37:44 -0300